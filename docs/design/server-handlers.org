* Extending the Server

Server-side and client-side we can run a function =F= before setting a value
with =set=. However in the Telescope server we can't do anything between when
the server receives the request =T_x= and when the server calls a function to
set the value in the database =T_y=.

We need to pass a function which can execute arbitrary code between =T_x= and
=T_y=. Right now I see no reason that the function needs to filter to only run
when matched against some primary key, but instead should be run against all
values of some data type =a=. This is more simple and should suffice for now, it
can always be extended.

In addition to running arbitrary code, the function should allow for the
conversion of one =Entity= to another. This will allow the user to convert a
data type of type =a= received from the client to another of type =b= that will
be set in the database, without the user having to remember to =set= the new
value of type =b=.

#+begin_src haskell
-- A function that converts one Entity to another.
-- It can also return the same value that has been given: @OnSet a a@.
type ServerAction a b = (Entity a k, Entity b l, MonadIO) m) => a -> m b
#+end_src

In addition to running a function when a value is =set=, we also need to run a
function when a value is =rm= ed or when a value is =view= ed. Currently =set=
and =rm= do not return values, however =view= does. A user might also want to
set a function after =T_y= when a value is =view= ed from the database but has
not yet returned a value =T_z=.

So there are four cases when a user might want to inject some code or possibly
convert the value of the data type being handled by the server, which are
outlined below:

#+begin_src haskell
type OnSetReceipt  = ServerAction
type OnRmReceipt   = ServerAction
type OnViewReceipt = ServerAction
type OnViewRespond = ServerAction
#+end_src

However a user might want to run a function in all =*Receipt= cases, passing the
same function three times is not very convenient. Allowing the user to filter
their function to run in specific cases prevents the user having to pass their
function many times over, instead just passing e.g. =All= to indicate the
function should run in all four cases. Furthermore they don't have to worry as
much about passing arguments in correct order, instead just pass e.g. =Receipt=.

#+begin_src haskell
data When  = All | Receipt | Send | When [When']
data When' = SetReceipt | RmReceipt | ViewReceipt | ViewSend
#+end_src

There might be a number of =ServerAction= s to run. For different types of
=Entity=. These =ServerAction= will be passed in some kind of container, perhaps
a =List=, but since we are concerned with different types of =Entity= then we
will need a heterogenous list.

#+begin_src haskell
data ServerAction =
  forall a k b l m. (Entity a k, Entity b l, MonadIO m) => a -> m b
#+end_src

Time for a usage example, we want to convert between two data types. Some value
of type =a= is received from the client, to =set= in the database, but we want
to add some information before storing it, converting to type =b=. And when the
client wants to =view= the value we remove the information again, converting
from =b= to =a=. In this case we want a function of type =a -> m b= and a
function of type =b -> m a=, where =a= and =b= are =Entity=.

#+begin_src haskell
-- | 'ServerAction's to convert between client and server-side data types.
convert :: (Entity a k, Entity b l, MonadIO m) =>
  (a -> m b) -> (b -> m a) -> ((ServerAction, When), (ServerAction, When))
#+end_src

The user might have a lot of functions to run in different cases. The
granularity is that a user can run a function for some unique case =(When,
TableKey)= which we will denote =Case=, where =TableKey= is a serialized
representation of the type of an =Entity a=.

We don't want duplicates for any one =Case=. Consider we have two functions =f1=
and =f2= that are both to be run when some value of type =a= is to be =set= in
the database. What if the functions =f1= and =f2= don't return the same type? We
could run both functions and set both results in the databse. But running both
doesn't quite make sense in some cases (e.g what if one function just prints
something, did the user really intend to set both the converted data type, and
the one where something was printed?). Instead it is better to throw an error
prior to running the server:

#+begin_src haskell
-- | Actions to be run by the server on receipt/send of requests/responses.
type ServerActions = Map (When, TableKey) ServerAction
#+end_src
